using System;
using System.IO;
using System.Net;
using System.Threading;

class Program
{
    static void Main(string[] args)
    {
        Thread serverThread = new Thread(new ThreadStart(StartHttpServer));
        serverThread.Start();
        Console.WriteLine("HTTP Server is running. Press any key to quit.");
        Console.ReadKey();
    }

    static void StartHttpServer()
    {
        string url = "http://localhost:8080/";
        string basePath = @"C:\Users\YourUsername\Desktop"; // Ensure this path is correctly set to your needs

        using (HttpListener listener = new HttpListener())
        {
            listener.Prefixes.Add(url);
            listener.Start();
            Console.WriteLine("Listening on " + url);

            while (true)
            {
                try
                {
                    HttpListenerContext context = listener.GetContext();
                    ServeFile(context, basePath);
                }
                catch (Exception ex)
                {
                    Console.WriteLine("Error: " + ex.Message);
                }
            }
        }
    }

    static void ServeFile(HttpListenerContext context, string basePath)
    {
        string requestedFile = context.Request.Url.AbsolutePath.TrimStart('/');
        string filePath = Path.Combine(basePath, requestedFile);
        filePath = Path.GetFullPath(filePath);  // To avoid security issues with ".." paths

        if (!filePath.StartsWith(basePath, StringComparison.OrdinalIgnoreCase))
        {
            context.Response.StatusCode = 400; // Bad Request
            context.Response.Close();
            return;
        }

        if (File.Exists(filePath))
        {
            byte[] buffer = File.ReadAllBytes(filePath);
            context.Response.ContentType = GetMimeType(Path.GetExtension(filePath));
            context.Response.ContentLength64 = buffer.Length;
            context.Response.OutputStream.Write(buffer, 0, buffer.Length);
        }
        else
        {
            context.Response.StatusCode = 404; // Not Found
        }
        context.Response.Close();
    }

    static string GetMimeType(string extension)
    {
        switch (extension.ToLower())
        {
            case ".html": return "text/html";
            case ".css": return "text/css";
            case ".js": return "application/javascript";
            case ".png": return "image/png";
            case ".jpg": case ".jpeg": return "image/jpeg";
            case ".gif": return "image/gif";
            default: return "application/octet-stream";
        }
    }
}


https://chat.openai.com/share/87b856da-91bb-454a-a660-233b1f5920c6
https://chat.openai.com/share/cb227437-d123-4023-8cb0-c9e3087edff0
using System;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Threading.Tasks;

public class TcpListenerService
{
    private TcpListener tcpListener;
    private bool isRunning = false;

    public void StartListener()
    {
        tcpListener = new TcpListener(IPAddress.Any, 7777);
        tcpListener.Start();
        isRunning = true;

        Task.Run(() => ListenForConnections());
    }

    private void ListenForConnections()
    {
        try
        {
            while (isRunning)
            {
                TcpClient client = tcpListener.AcceptTcpClient();
                Task.Run(() => HandleConnection(client));
            }
        }
        catch (SocketException ex)
        {
            // Handle exception (log or ignore if stopping the listener)
        }
        finally
        {
            tcpListener?.Stop();
        }
    }

    private void HandleConnection(TcpClient client)
    {
        using (client)
        using (NetworkStream stream = client.GetStream())
        using (StreamReader reader = new StreamReader(stream))
        {
            string message = reader.ReadToEnd();
            // Process the message here. For example, update some data or trigger an event.
        }
    }

    public void StopListener()
    {
        isRunning = false;
        tcpListener?.Stop();
    }
}

using System.Web;
// Ensure you have the correct using statement for your TcpListenerService's namespace
using YourProjectNamespace.Services; 

public class Global : HttpApplication
{
    private static TcpListenerService tcpListenerService = new TcpListenerService();

    protected void Application_Start(object sender, EventArgs e)
    {
        // Start the TCP listener when the application starts
        tcpListenerService.StartListener();

        // Other startup tasks...
        RouteConfig.RegisterRoutes(RouteTable.Routes);
        BundleConfig.RegisterBundles(BundleTable.Bundles);
        // Add any other necessary startup code here (e.g., database initialization, logging setup, etc.)
    }

    protected void Application_End(object sender, EventArgs e)
    {
        // Stop the TCP listener when the application ends
        tcpListenerService.StopListener();

        // Any other cleanup code can go here
    }

    // Other global application event handlers if necessary...
}

